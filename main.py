import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

ADMIN_CONTACT = "@aksy_can_help"
CRYPTO_ADDRESSES = {
    "BTC": "bc1qexampleaddressbtc",
    "USDT": "TExampleUSDTAddress",
    "TON": "EQCexampleTONaddress",
    "LTC": "ltc1qexampleltcaddress",
    "Monero": "4AexampleMoneroAddress",
    "–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Å—á—ë—Ç": "IBAN: LV00BANK0123456789012"
}
PRICES = {
    "1 –≥": "15‚Ç¨",
    "5 –≥": "50‚Ç¨",
    "10 –≥": "70‚Ç¨"
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("‚úâÔ∏è –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", callback_data="order")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω A...+!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "order":
        grams_keyboard = [[InlineKeyboardButton(f"A...+ {g} ‚Äî {p}", callback_data=f"gram_{g}")] for g, p in PRICES.items()]
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä—ë–º:", reply_markup=InlineKeyboardMarkup(grams_keyboard))
    elif query.data.startswith("gram_"):
        g = query.data.split("_")[1]
        context.user_data["gram"] = g
        methods = [[InlineKeyboardButton(k, callback_data=f"pay_{k}")] for k in CRYPTO_ADDRESSES.keys()]
        await query.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: A...+ {g}\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=InlineKeyboardMarkup(methods))
    elif query.data.startswith("pay_"):
        m = query.data.split("_")[1]
        g = context.user_data.get("gram", "?")
        price = PRICES.get(g, "?")
        addr = CRYPTO_ADDRESSES[m]
        context.user_data["payment"] = m
        context.user_data["address"] = addr
        context.user_data["price"] = price
        delivery_keyboard = [
            [InlineKeyboardButton("üìç –î—Ä–æ–ø (–∑–∞–∫–ª–∞–¥–∫–∞)", callback_data="delivery_drop")],
            [InlineKeyboardButton("üì¶ –ü–æ—á—Ç–æ–≤–∞—è –ø–æ—Å—ã–ª–∫–∞", callback_data="delivery_mail")]
        ]
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:",
            reply_markup=InlineKeyboardMarkup(delivery_keyboard)
        )
    elif query.data.startswith("delivery_"):
        delivery = "–∑–∞–∫–ª–∞–¥–∫—É" if query.data == "delivery_drop" else "–ø–æ—á—Ç–æ–≤—É—é –ø–æ—Å—ã–ª–∫—É"
        g = context.user_data.get("gram", "?")
        price = context.user_data.get("price", "?")
        m = context.user_data.get("payment", "?")
        addr = context.user_data.get("address", "?")
        text = f"–í–∞—à –∑–∞–∫–∞–∑: A...+ {g} ‚Äî {price}\n–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑: {m}\n–î–æ—Å—Ç–∞–≤–∫–∞: {delivery}\n–ê–¥—Ä–µ—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n{addr}\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ –≤–∞—à –Ω–∏–∫ –≤ {ADMIN_CONTACT}"
        await query.edit_message_text(text, parse_mode="Markdown")

app = ApplicationBuilder().token(os.getenv("BOT_TOKEN")).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("order", start))
app.add_handler(CallbackQueryHandler(handle_callback))
app.run_polling()
